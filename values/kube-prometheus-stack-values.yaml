prometheus:
  prometheusSpec:
    ## If true, a nil or {} value for prometheus.prometheusSpec.serviceMonitorSelector will cause the
    ## prometheus resource to be created with selectors based on values in the helm deployment,
    ## which will also match the servicemonitors created
    ##
    serviceMonitorSelectorNilUsesHelmValues: false
    ## If true, a nil or {} value for prometheus.prometheusSpec.podMonitorSelector will cause the
    ## prometheus resource to be created with selectors based on values in the helm deployment,
    ## which will also match the podmonitors created
    ##
    podMonitorSelectorNilUsesHelmValues: false

grafana:
  enabled: true
  adminPassword: amirkato
  ingress:
    ## If true, Grafana Ingress will be created
    ##
    enabled: true

    ## IngressClassName for Grafana Ingress.
    ## Should be provided if Ingress is enable.
    ##
    ingressClassName: nginx

    ## Annotations for Grafana Ingress
    ##
    annotations: 
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      cert-manager.io/cluster-issuer: "letsencrypt"   

    hosts:
      - poster-downloader.ddns.net

    ## Path for grafana ingress
    path: /grafana

    ## TLS configuration for grafana Ingress
    ## Secret must be manually created in the namespace
    ##
    tls: 
      - hosts:
        - poster-downloader.ddns.net
        secretName: source-tls        

  # # To make Grafana persistent (Using Statefulset)
  # #
  persistence:
    enabled: true
    type: pvc  
    accessModes:
      - ReadWriteOnce
    size: 5Gi  